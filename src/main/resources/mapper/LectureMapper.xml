<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="aibe1.proj2.mentoss.feature.lecture.model.mapper.LectureMapper">

    <!-- 강의 생성 -->
    <insert id="createLecture" parameterType="aibe1.proj2.mentoss.global.entity.Lecture">
        INSERT INTO lecture (
            lecture_title, description, category_id, curriculum,
            price, mentor_id, available_time_slots, status
        ) VALUES (
                     #{lectureTitle}, #{description}, #{categoryId}, #{curriculum},
                     #{price}, #{mentorId}, '[]', #{status}
                 )
    </insert>

    <!-- 강의 ID 조회 (생성 후) -->
    <select id="getLastInsertId" resultType="Long">
        SELECT LAST_INSERT_ID()
    </select>

    <!-- 강의 지역 등록 -->
    <insert id="insertLectureRegion">
        INSERT INTO lecture_region (lecture_id, region_code)
        VALUES (#{lectureId}, #{regionCode})
    </insert>

    <!-- 강의 시간대 정보 업데이트 (JSON 형태로 저장) -->
    <update id="updateLectureTimeSlots">
        UPDATE lecture SET available_time_slots = #{timeSlots}
        WHERE lecture_id = #{lectureId}
    </update>

    <!-- 강의 목록 조회 (필터링, 검색, 페이징) -->
    <select id="findLectures" resultType="aibe1.proj2.mentoss.feature.lecture.model.dto.response.LectureListResponse">
        SELECT
        l.lecture_id AS lectureId,
        l.lecture_title AS lectureTitle,
        l.price,
        u.nickname AS mentorNickname,
        u.profile_image AS profileImage,
        COALESCE(AVG(r.rating), 0) AS averageRating,
        COUNT(DISTINCT r.review_id) AS reviewCount,
        mp.is_certified AS isCertified,
        lc.parent_category AS parentCategory,
        lc.middle_category AS middleCategory,
        lc.subcategory AS subcategory,
        l.created_at AS createdAt
        FROM lecture l
        JOIN mentor_profile mp ON l.mentor_id = mp.mentor_id
        JOIN app_user u ON mp.user_id = u.user_id
        JOIN lecture_category lc ON l.category_id = lc.category_id
        LEFT JOIN review r ON l.lecture_id = r.lecture_id AND r.is_deleted = FALSE AND r.status = 'AVAILABLE'
        <if test="searchRequest.region != null">
            JOIN lecture_region lr ON l.lecture_id = lr.lecture_id
            JOIN region reg ON lr.region_code = reg.region_code
        </if>
        WHERE l.is_deleted = FALSE
        AND l.status = 'AVAILABLE'
        <if test="searchRequest.keyword != null">
            AND (l.lecture_title LIKE CONCAT('%', #{searchRequest.keyword}, '%')
            OR l.description LIKE CONCAT('%', #{searchRequest.keyword}, '%')
            OR u.nickname LIKE CONCAT('%', #{searchRequest.keyword}, '%'))
        </if>
        <if test="searchRequest.category != null">
            AND (lc.parent_category = #{searchRequest.category}
            OR lc.middle_category = #{searchRequest.category}
            OR lc.subcategory = #{searchRequest.category})
        </if>
        <if test="searchRequest.minPrice != null">
            AND l.price >= #{searchRequest.minPrice}
        </if>
        <if test="searchRequest.maxPrice != null">
            AND l.price &lt;= #{searchRequest.maxPrice}
        </if>
        <if test="searchRequest.region != null">
            AND (reg.sido LIKE CONCAT('%', #{searchRequest.region}, '%')
            OR reg.sigungu LIKE CONCAT('%', #{searchRequest.region}, '%')
            OR reg.dong LIKE CONCAT('%', #{searchRequest.region}, '%'))
        </if>
        <if test="searchRequest.isCertified != null">
            AND mp.is_certified = #{searchRequest.isCertified}
        </if>
        <if test="searchRequest.isOpen != null">
            AND l.is_closed = #{searchRequest.isOpen}
        </if>
        GROUP BY l.lecture_id
        <if test="searchRequest.minRating != null">
            HAVING COALESCE(AVG(r.rating), 0) >= #{searchRequest.minRating}
        </if>
        ORDER BY l.created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 강의 목록 총 개수 조회 -->
    <select id="countLectures" resultType="long">
        SELECT COUNT(*) FROM (
        SELECT l.lecture_id
        FROM lecture l
        JOIN mentor_profile mp ON l.mentor_id = mp.mentor_id
        JOIN app_user u ON mp.user_id = u.user_id
        JOIN lecture_category lc ON l.category_id = lc.category_id
        LEFT JOIN review r ON l.lecture_id = r.lecture_id AND r.is_deleted = FALSE AND r.status = 'AVAILABLE'
        <if test="searchRequest.region != null">
            JOIN lecture_region lr ON l.lecture_id = lr.lecture_id
            JOIN region reg ON lr.region_code = reg.region_code
        </if>
        WHERE l.is_deleted = FALSE
        AND l.status = 'AVAILABLE'
        <if test="searchRequest.keyword != null">
            AND (l.lecture_title LIKE CONCAT('%', #{searchRequest.keyword}, '%')
            OR l.description LIKE CONCAT('%', #{searchRequest.keyword}, '%')
            OR u.nickname LIKE CONCAT('%', #{searchRequest.keyword}, '%'))
        </if>
        <if test="searchRequest.category != null">
            AND (lc.parent_category = #{searchRequest.category}
            OR lc.middle_category = #{searchRequest.category}
            OR lc.subcategory = #{searchRequest.category})
        </if>
        <if test="searchRequest.region != null">
            AND (reg.sido LIKE CONCAT('%', #{searchRequest.region}, '%')
            OR reg.sigungu LIKE CONCAT('%', #{searchRequest.region}, '%')
            OR reg.dong LIKE CONCAT('%', #{searchRequest.region}, '%'))
        </if>
        <if test="searchRequest.minPrice != null">
            AND l.price >= #{searchRequest.minPrice}
        </if>
        <if test="searchRequest.maxPrice != null">
            AND l.price &lt;= #{searchRequest.maxPrice}
        </if>
        <if test="searchRequest.isCertified != null">
            AND mp.is_certified = #{searchRequest.isCertified}
        </if>
        <if test="searchRequest.isOpen != null">
            AND l.is_closed = #{searchRequest.isOpen}
        </if>
        GROUP BY l.lecture_id
        <if test="searchRequest.minRating != null">
            HAVING COALESCE(AVG(r.rating), 0) >= #{searchRequest.minRating}
        </if>
        ) AS count_table
    </select>

    <!-- 강의 기본 정보 조회 -->
    <select id="getLectureById" resultType="aibe1.proj2.mentoss.feature.lecture.model.dto.response.LectureResponse">
        SELECT
            l.lecture_id AS lectureId,
            l.lecture_title AS lectureTitle,
            u.nickname AS mentorNickname,
            l.created_at AS createdAt,
            l.updated_at AS updatedAt,
            lc.parent_category AS parentCategory,
            lc.middle_category AS middleCategory,
            lc.subcategory AS subcategory,
            l.is_closed AS isClosed,
            l.status AS status,
            l.description AS description,
            l.price AS price,
            l.curriculum AS curriculum,
            (SELECT JSON_ARRAYAGG(
                            CONCAT(r.sido, ' ', r.sigungu, ' ', IFNULL(r.dong, ''))
                    ) FROM lecture_region lr
                               JOIN region r ON lr.region_code = r.region_code
             WHERE lr.lecture_id = l.lecture_id
            ) AS regions,
            l.available_time_slots AS timeSlots
        FROM lecture l
                 JOIN mentor_profile mp ON l.mentor_id = mp.mentor_id
                 JOIN app_user u ON mp.user_id = u.user_id
                 JOIN lecture_category lc ON l.category_id = lc.category_id
        WHERE l.lecture_id = #{lectureId}
          AND l.is_deleted = FALSE
    </select>

    <!-- 강의 상세 정보 조회 -->
    <select id="getLectureDetailById" resultType="aibe1.proj2.mentoss.feature.lecture.model.dto.response.LectureDetailResponse">
        SELECT
            l.lecture_id AS lectureId,
            l.lecture_title AS lectureTitle,
            l.description,
            l.price,
            l.available_time_slots AS timeSlots
        FROM lecture l
        WHERE l.lecture_id = #{lectureId}
          AND l.is_deleted = FALSE
    </select>

    <!-- 강의 지역 정보 조회 -->
    <select id="getLectureRegions" resultType="string">
        SELECT
            CONCAT(r.sido, ' ', r.sigungu, ' ', IFNULL(r.dong, ''))
        FROM lecture_region lr
                 JOIN region r ON lr.region_code = r.region_code
        WHERE lr.lecture_id = #{lectureId}
    </select>

    <!-- 강의 기본 정보 업데이트 -->
    <update id="updateLecture" parameterType="aibe1.proj2.mentoss.global.entity.Lecture">
        UPDATE lecture SET
                           lecture_title = #{lectureTitle},
                           description = #{description},
                           category_id = #{categoryId},
                           curriculum = #{curriculum},
                           price = #{price},
                           updated_at = CURRENT_TIMESTAMP
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
    </update>

    <!-- 강의 지역 정보 삭제 -->
    <delete id="deleteLectureRegions">
        DELETE FROM lecture_region WHERE lecture_id = #{lectureId}
    </delete>

    <!-- 강의가 존재하는지 확인 -->
    <select id="existsLectureById" resultType="int">
        SELECT COUNT(*) FROM lecture WHERE lecture_id = #{lectureId} AND is_deleted = FALSE
    </select>

    <!-- 강의 삭제 (soft delete) -->
    <update id="softDeleteLecture">
        UPDATE lecture SET
                           is_deleted = TRUE,
                           deleted_at = CURRENT_TIMESTAMP
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
    </update>

    <!-- 강의 커리큘럼 조회 -->
    <select id="getLectureCurriculum" resultType="aibe1.proj2.mentoss.feature.lecture.model.dto.response.LectureCurriculumResponse">
        SELECT
            lecture_id AS lectureId,
            curriculum
        FROM lecture
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
    </select>

    <!-- 강의 리뷰 목록 조회 -->
    <select id="getLectureReviews" resultType="aibe1.proj2.mentoss.feature.lecture.model.dto.response.LectureReviewResponse">
        SELECT
            r.review_id AS reviewId,
            r.lecture_id AS lectureId,
            u.nickname AS writerNickname,
            r.content,
            r.rating,
            r.created_at AS createdAt
        FROM review r
                 JOIN app_user u ON r.writer_id = u.user_id
        WHERE r.lecture_id = #{lectureId}
          AND r.is_deleted = FALSE
          AND r.status = 'AVAILABLE'
        ORDER BY r.created_at DESC
    </select>

    <!-- 강의 평균 평점 조회 -->
    <select id="getLectureAverageRating" resultType="Double">
        SELECT COALESCE(AVG(rating), 0)
        FROM review
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
          AND status = 'AVAILABLE'
    </select>

    <!-- 강의 리뷰 개수 조회 -->
    <select id="getLectureReviewCount" resultType="Long">
        SELECT COUNT(*)
        FROM review
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
          AND status = 'AVAILABLE'
    </select>

    <!-- 강의 마감 오픈 상태 변경 -->
    <update id="updateLectureClosed">
        UPDATE lecture SET is_closed = #{isClosed}
        WHERE lecture_id = #{lectureId}
          AND is_deleted = FALSE
    </update>
</mapper>